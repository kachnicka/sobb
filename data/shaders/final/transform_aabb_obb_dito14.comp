#version 460

#extension GL_EXT_buffer_reference2: require
#extension GL_EXT_scalar_block_layout: require
#extension GL_GOOGLE_include_directive : enable

#extension GL_KHR_memory_scope_semantics : require
#extension GL_EXT_shader_realtime_clock: require

#define DOP_14
#define INCLUDE_FROM_SHADER
#include "shared/types.glsl"
#include "shared/compute.glsl"
#include "shared/bv_aabb.glsl"
#include "shared/bv_dop.glsl"
#include "shared/bv_obb.glsl"
#include "shared/data_bvh.h"
#include "shared/data_plocpp.h"
#include "shared/data_scene.h"

layout(local_size_x_id = 0) in;

layout(push_constant) uniform uPushConstant {
    PC_TransformToOBB data;
} pc;

#define SCHEDULER_DATA_ADDRESS pc.data.schedulerDataAddress
#include "shared/task_scheduler.glsl"

struct DOP14_VertexId
{
    u32[14] vId;
};
layout(buffer_reference, scalar) buffer DOP14_VertexId_ref {
    DOP14_VertexId val[];
};
struct DOP14_InOBBTempStore
{
    f32[14] dop;
    u32 padding;
};
layout(buffer_reference, scalar) buffer DOP14_InOBBTempStore_ref {
    DOP14_InOBBTempStore val[];
};

#define TRI_ID_0 0x00000000u
#define TRI_ID_1 0x40000000u
#define TRI_ID_2 0x80000000u
#define TRI_ID_MASK 0x3FFFFFFFu

void projectVertices(in u32 taskId)
{
    u32 nodeId = taskId * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
    if (nodeId >= pc.data.leafNodeCount)
        return;

    BVH2_AABB bvh = BVH2_AABB(pc.data.bvhInAddress);
    BvhTriangleIndices triangleIndices = BvhTriangleIndices(pc.data.bvhInTriangleIndicesAddress);
    u32_buf counter = u32_buf(pc.data.traversalCounterAddress);
    GeometryDescriptor gDesc = GeometryDescriptor(pc.data.geometryDescriptorAddress);

    u32 triStartId = u32(bvh.node[nodeId].c0);
    u32 triCount = u32(abs(bvh.node[nodeId].size));

    BvhTriangleIndex ids = triangleIndices.val[triStartId];
    Geometry g = gDesc.g[ids.nodeId];
    uvec3_buf indices = uvec3_buf(g.idxAddress);
    vec3_buf vertices = vec3_buf(g.vtxAddress);
    uvec3 idx = indices.val[ids.triangleId];

    // init structure with first triangle
    // 2 most significant bits are used to encode the vertex id for the triangle
    VtxIds vIds;
    DOP dop = dopInitWithVertId(vertices.val[idx.x], TRI_ID_0 | triStartId, vIds);
    bvFitWithVertId(dop, vertices.val[idx.y], TRI_ID_1 | triStartId, vIds);
    bvFitWithVertId(dop, vertices.val[idx.z], TRI_ID_2 | triStartId, vIds);

    // process remaining triangles
    for (u32 triId = (triStartId + 1); triId < triStartId + triCount; triId++) {
        ids = triangleIndices.val[triId];

        g = gDesc.g[ids.nodeId];
        indices = uvec3_buf(g.idxAddress);
        vertices = vec3_buf(g.vtxAddress);
        idx = indices.val[ids.triangleId];

        bvFitWithVertId(dop, vertices.val[idx.x], TRI_ID_0 | triId, vIds);
        bvFitWithVertId(dop, vertices.val[idx.y], TRI_ID_1 | triId, vIds);
        bvFitWithVertId(dop, vertices.val[idx.z], TRI_ID_2 | triId, vIds);
    }

    DOP14_VertexId_ref ditoPoints = DOP14_VertexId_ref(pc.data.ditoPointsAddress);
    DOP14_InOBBTempStore_ref dopStore = DOP14_InOBBTempStore_ref(pc.data.obbAddress);
    ditoPoints.val[nodeId].vId = vIds;
    dopStore.val[nodeId].dop = dop;

    // '~' encoded leafId
    i32 cId = ~(i32(nodeId));
    nodeId = bvh.node[nodeId].parent;
    while (atomicAdd(counter.val[nodeId], 1) > 0)
    {
        i32 nodeIdToLoad = (cId == bvh.node[nodeId].c0) ? bvh.node[nodeId].c1 : bvh.node[nodeId].c0;
        if (nodeIdToLoad < 0)
            nodeIdToLoad = ~nodeIdToLoad;

        VtxIds vIdsLoaded = ditoPoints.val[nodeIdToLoad].vId;
        DOP dopLoaded = dopStore.val[nodeIdToLoad].dop;

        bvFitWithVertId(dop, vIds, dopLoaded, vIdsLoaded);

        ditoPoints.val[nodeId].vId = vIds;
        dopStore.val[nodeId].dop = dop;
        memoryBarrier(gl_ScopeQueueFamily, gl_StorageSemanticsBuffer, gl_SemanticsAcquireRelease | gl_SemanticsMakeAvailable | gl_SemanticsMakeVisible);

        cId = i32(nodeId);
        nodeId = bvh.node[nodeId].parent;
        if (nodeId == INVALID_ID)
            return;
    }
}

layout(buffer_reference, scalar) buffer OBB_buf {
    OBB val[];
};
layout(buffer_reference, scalar) buffer iOBB_buf {
    iOBB val[];
};

#define FETCH_POINT(fetch_id) \
    ids = triangleIndices.val[ditoPoints.val[nodeId].vId[fetch_id] & TRI_ID_MASK]; \
    vId = ditoPoints.val[nodeId].vId[fetch_id] >> 30; \
    g = gDesc.g[ids.nodeId]; \
    indices = uvec3_buf(g.idxAddress); \
    vertices = vec3_buf(g.vtxAddress); \
    idx = indices.val[ids.triangleId]; \
    switch (vId) { \
        case 0: points[fetch_id] = vertices.val[idx.x]; break; \
        case 1: points[fetch_id] = vertices.val[idx.y]; break; \
        case 2: points[fetch_id] = vertices.val[idx.z]; break; \
    }

vec3[14] fetchPoints(u32 nodeId)
{
    vec3[14] points;
    DOP14_VertexId_ref ditoPoints = DOP14_VertexId_ref(pc.data.ditoPointsAddress);
    BvhTriangleIndices triangleIndices = BvhTriangleIndices(pc.data.bvhInTriangleIndicesAddress);
    GeometryDescriptor gDesc = GeometryDescriptor(pc.data.geometryDescriptorAddress);

    BvhTriangleIndex ids = triangleIndices.val[ditoPoints.val[nodeId].vId[0] & TRI_ID_MASK];
    u32 vId = ditoPoints.val[nodeId].vId[0] >> 30;
    Geometry g = gDesc.g[ids.nodeId];
    uvec3_buf indices = uvec3_buf(g.idxAddress);
    vec3_buf vertices = vec3_buf(g.vtxAddress);
    uvec3 idx = indices.val[ids.triangleId];
    switch (vId) {
        case 0:
        points[0] = vertices.val[idx.x];
        break;
        case 1:
        points[0] = vertices.val[idx.y];
        break;
        case 2:
        points[0] = vertices.val[idx.z];
        break;
    }
    FETCH_POINT(1);
    FETCH_POINT(2);
    FETCH_POINT(3);
    FETCH_POINT(4);
    FETCH_POINT(5);
    FETCH_POINT(6);
    FETCH_POINT(7);
    FETCH_POINT(8);
    FETCH_POINT(9);
    FETCH_POINT(10);
    FETCH_POINT(11);
    FETCH_POINT(12);
    FETCH_POINT(13);

    return points;
}

void dito(in u32 taskId)
{
    u32 nodeId = taskId * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
    if (nodeId >= (pc.data.leafNodeCount * 2 - 1))
        return;

    BVH2_AABB bvh = BVH2_AABB(pc.data.bvhInAddress);

    OBB obb = OBB(
            vec3(1.f, 0.f, 0.f),
            vec3(0.f, 1.f, 0.f),
            vec3(0.f, 0.f, 1.f),
            bvh.node[nodeId].bv.min,
            bvh.node[nodeId].bv.max);

    vec3[14] points = fetchPoints(nodeId);
    obbByDiTO14(obb, points);

    iOBB_buf obb_buf = iOBB_buf(pc.data.obbAddress);
    obb_buf.val[nodeId] = iOBB(obb.b0, obb.b1, obb.b2, floatBitsToInt(obb.min), floatBitsToInt(obb.max));
}

#define atomicMinF(x,y) ((y >= 0.f) ? atomicMin(x, floatBitsToInt(y)) : atomicMax(x, int(floatBitsToUint(y))))
#define atomicMaxF(x,y) ((y >= 0.f) ? atomicMax(x, floatBitsToInt(y)) : atomicMin(x, int(floatBitsToUint(y))))

void refitObbTree(in u32 taskId)
{
    u32 nodeId = taskId * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
    if (nodeId >= pc.data.leafNodeCount)
        return;

    BVH2_AABB bvh = BVH2_AABB(pc.data.bvhInAddress);
    BvhTriangleIndices triangleIndices = BvhTriangleIndices(pc.data.bvhInTriangleIndicesAddress);
    GeometryDescriptor gDesc = GeometryDescriptor(pc.data.geometryDescriptorAddress);

    iOBB_buf obb_buf = iOBB_buf(pc.data.obbAddress);
    iOBB obb = obb_buf.val[nodeId];
    OBB fobb = OBB(vec3(obb.b0), vec3(obb.b1), vec3(obb.b2), intBitsToFloat(obb.min), intBitsToFloat(obb.max));
    vec3 fobbMin = fobb.min;
    vec3 fobbMax = fobb.max;

    i32 triStartId = bvh.node[nodeId].c0;
    i32 triCount = abs(bvh.node[nodeId].size);

    // max leaf node size is 16
    vec3[48] points;
    i32 pId = 0;
    for (i32 triId = triStartId; triId < triStartId + triCount; triId++) {
        BvhTriangleIndex ids = triangleIndices.val[triId];

        Geometry g = gDesc.g[ids.nodeId];
        uvec3_buf indices = uvec3_buf(g.idxAddress);
        vec3_buf vertices = vec3_buf(g.vtxAddress);
        uvec3 idx = indices.val[ids.triangleId];

        points[pId] = vertices.val[idx.x];
        refitObb(fobb, points[pId++]);
        points[pId] = vertices.val[idx.y];
        refitObb(fobb, points[pId++]);
        points[pId] = vertices.val[idx.z];
        refitObb(fobb, points[pId++]);
    }
    if (fobb.min.x < fobbMin.x) atomicMinF(obb_buf.val[nodeId].min.x, fobb.min.x);
    if (fobb.min.y < fobbMin.y) atomicMinF(obb_buf.val[nodeId].min.y, fobb.min.y);
    if (fobb.min.z < fobbMin.z) atomicMinF(obb_buf.val[nodeId].min.z, fobb.min.z);
    if (fobb.max.x > fobbMax.x) atomicMaxF(obb_buf.val[nodeId].max.x, fobb.max.x);
    if (fobb.max.y > fobbMax.y) atomicMaxF(obb_buf.val[nodeId].max.y, fobb.max.y);
    if (fobb.max.z > fobbMax.z) atomicMaxF(obb_buf.val[nodeId].max.z, fobb.max.z);

    while (bvh.node[nodeId].parent != INVALID_ID) {
        nodeId = bvh.node[nodeId].parent;
        obb = obb_buf.val[nodeId];
        fobb = OBB(vec3(obb.b0), vec3(obb.b1), vec3(obb.b2), intBitsToFloat(obb.min), intBitsToFloat(obb.max));
        fobbMin = fobb.min;
        fobbMax = fobb.max;

        pId = 0;
        for (i32 triId = 0; triId < triCount; triId++) {
            refitObb(fobb, points[pId++]);
            refitObb(fobb, points[pId++]);
            refitObb(fobb, points[pId++]);
        }
        if (fobb.min.x < fobbMin.x) atomicMinF(obb_buf.val[nodeId].min.x, fobb.min.x);
        if (fobb.min.y < fobbMin.y) atomicMinF(obb_buf.val[nodeId].min.y, fobb.min.y);
        if (fobb.min.z < fobbMin.z) atomicMinF(obb_buf.val[nodeId].min.z, fobb.min.z);
        if (fobb.max.x > fobbMax.x) atomicMaxF(obb_buf.val[nodeId].max.x, fobb.max.x);
        if (fobb.max.y > fobbMax.y) atomicMaxF(obb_buf.val[nodeId].max.y, fobb.max.y);
        if (fobb.max.z > fobbMax.z) atomicMaxF(obb_buf.val[nodeId].max.z, fobb.max.z);
    }
}

void extractTransformation(in u32 taskId)
{
    u32 nodeId = taskId * gl_WorkGroupSize.x + gl_LocalInvocationID.x;

    if (nodeId >= (pc.data.leafNodeCount * 2 - 1))
        return;

    iOBB_buf obb_buf = iOBB_buf(pc.data.obbAddress);
    iOBB obb = obb_buf.val[nodeId];

    vec3 obbMin = intBitsToFloat(obb.min);
    vec3 obbMax = intBitsToFloat(obb.max);
    vec3 obbCenter_lcs = (obbMin + obbMax) * 0.5f;

    // prevent flat obb
    vec3 obbDim = max((obbMax - obbMin) * 0.5f, vec3(0.001f));

    vec3 obbCenter_gcs = obb.b0 * obbCenter_lcs.x + obb.b1 * obbCenter_lcs.y + obb.b2 * obbCenter_lcs.z;

    mat4 r = mat4(
            obb.b0.x, obb.b0.y, obb.b0.z, 0.f,
            obb.b1.x, obb.b1.y, obb.b1.z, 0.f,
            obb.b2.x, obb.b2.y, obb.b2.z, 0.f,
            0.f, 0.f, 0.f, 1.f);
    mat4 s = mat4(
            obbDim.x * 2.f, 0.f, 0.f, 0.f,
            0.f, obbDim.y * 2.f, 0.f, 0.f,
            0.f, 0.f, obbDim.z * 2.f, 0.f,
            0.f, 0.f, 0.f, 1.f);
    mat4 t = mat4(
            1.f, 0.f, 0.f, 0.f,
            0.f, 1.f, 0.f, 0.f,
            0.f, 0.f, 1.f, 0.f,
            obbCenter_gcs.x, obbCenter_gcs.y, obbCenter_gcs.z, 1.f);

    mat4 obbMat = t * (r * s);
    obbMat = inverse(obbMat);

    mat4x3 obbMat43 = mat4x3(obbMat[0].xyz, obbMat[1].xyz, obbMat[2].xyz, obbMat[3].xyz);

    BVH2_AABB bvh = BVH2_AABB(pc.data.bvhInAddress);
    BVH2_OBB bvhOBB = BVH2_OBB(pc.data.bvhOutAddress);

    bvhOBB.node[nodeId].bv = obbMat43;
    bvhOBB.node[nodeId].size = bvh.node[nodeId].size;
    bvhOBB.node[nodeId].parent = bvh.node[nodeId].parent;
    bvhOBB.node[nodeId].c0 = bvh.node[nodeId].c0;
    bvhOBB.node[nodeId].c1 = bvh.node[nodeId].c1;
}

layout(buffer_reference, scalar) buffer DiTOTimes_TMP {
    u64 project;
    u64 select;
    u64 refit;
    u64 finalise;

    u64 start;
};

#define DITO_PROJECT_POINTS 1
#define DITO_KERNEL 2
#define DITO_REFIT_OBB 3
#define DITO_TRANSFORMS 4
#define DITO_DONE 420

void main()
{
    DiTOTimes_TMP times = DiTOTimes_TMP(pc.data.timesAddress_TMP);

    if (gl_GlobalInvocationID.x == 0) {
        times.start = clockRealtimeEXT();
        allocTasks(divCeil(pc.data.leafNodeCount, gl_WorkGroupSize.x), DITO_PROJECT_POINTS);
    }

    while (true) {
        Task task = beginTask(gl_LocalInvocationID.x);

        switch (task.phase) {
            case DITO_PROJECT_POINTS:
            projectVertices(task.id);

            if (endTask(gl_LocalInvocationID.x)) {
                u64 time = clockRealtimeEXT();
                times.project = time - times.start;
                times.start = time;

                u32 taskCount = divCeil(pc.data.leafNodeCount * 2 - 1, gl_WorkGroupSize.x);
                allocTasks(taskCount, DITO_KERNEL);
            }
            break;
            case DITO_KERNEL:
            dito(task.id);

            if (endTask(gl_LocalInvocationID.x)) {
                u64 time = clockRealtimeEXT();
                times.select = time - times.start;
                times.start = time;

                allocTasks(divCeil(pc.data.leafNodeCount, gl_WorkGroupSize.x), DITO_REFIT_OBB);
            }
            break;
            case DITO_REFIT_OBB:
            refitObbTree(task.id);

            if (endTask(gl_LocalInvocationID.x)) {
                u64 time = clockRealtimeEXT();
                times.refit = time - times.start;
                times.start = time;

                u32 taskCount = divCeil(pc.data.leafNodeCount * 2 - 1, gl_WorkGroupSize.x);
                allocTasks(taskCount, DITO_TRANSFORMS);
            }
            break;
            case DITO_TRANSFORMS:
            extractTransformation(task.id);

            if (endTask(gl_LocalInvocationID.x)) {
                u64 time = clockRealtimeEXT();
                times.finalise = time - times.start;
                times.start = 0;

                allocTasks(gl_NumWorkGroups.x, DITO_DONE);
            }
            break;
            case DITO_DONE:
            return;
        }
    }
    ;
}
